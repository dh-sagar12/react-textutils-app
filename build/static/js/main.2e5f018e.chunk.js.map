{"version":3,"sources":["About.jsx","Alert.jsx","Navbar.jsx","ReplaceText.jsx","TextForm.jsx","App.jsx","index.js"],"names":["About","className","id","Alert","props","alert","type","role","msg","Navbar","navDark","to","checked","check","onChange","DarkMode","htmlFor","ReplaceText","useState","find","replace","word","setWord","handleText","event","target","value","name","prevVal","tabIndex","darkMode","onClick","console","log","ReplaceTextFunc","TextForm","text","setText","Heading","rows","length","split","newText","toUpperCase","Button1","toLowerCase","Button2","listOfWords","updatedList","i","push","charAt","slice","updatedText","join","object","includes","App","setDarkMode","setNavDark","setCheck","setAlert","showAlert","message","e","document","body","classList","add","setTimeout","remove","exact","path","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2e5f018e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst About = () => {\r\n    return (\r\n        <>\r\n            <div className=\"container px-4 py-5\" id=\"hanging-icons\">\r\n                <h2 className=\"pb-2 border-bottom\">ABOUT TEXTUTILS</h2>\r\n                <div>\r\n                    <p>Text util provide you the functionality to change your text in wahtever you want to look like. you can do following things in this website</p>\r\n                </div>\r\n                <div className=\"row g-4 py-5 row-cols-1 row-cols-lg-3\">\r\n                    <div className=\"col d-flex align-items-start border-end\">\r\n                        <div className=\"icon-square bg-light text-dark flex-shrink-0 me-3\">\r\n                        </div>\r\n                        <div>\r\n                            <h2>Capitalize Text</h2>\r\n                            <p>Paragraph of text beneath the heading to explain the heading. We'll add onto it with another sentence and probably just keep going until we run out of words.</p>\r\n                             \r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col d-flex align-items-start border-end\">\r\n                        <div className=\"icon-square bg-light text-dark flex-shrink-0 me-3\">\r\n                        </div>\r\n                        <div>\r\n                            <h2>Lowecase all Text</h2>\r\n                            <p>Paragraph of text beneath the heading to explain the heading. We'll add onto it with another sentence and probably just keep going until we run out of words.</p>\r\n                             \r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col d-flex align-items-start\">\r\n                        <div className=\"icon-square bg-light text-dark flex-shrink-0 me-3\">\r\n                        </div>\r\n                        <div>\r\n                            <h2>Replace Text </h2>\r\n                            <p>Paragraph of text beneath the heading to explain the heading. We'll add onto it with another sentence and probably just keep going until we run out of words.</p>\r\n                             \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default About\r\n","import React from 'react'\r\n\r\nconst Alert = (props) => {\r\n    return (\r\n        props.alert &&\r\n\r\n        <>\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{props.alert.type}</strong>{ props.alert.msg}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nconst Navbar = (props) => {\r\n    let enableDarkMode = ()=>{\r\n        props.DarkMode()\r\n    }\r\n\r\n\r\n   \r\n    return (\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.navDark} bg-${props.navDark}`}>\r\n                <div className=\"container\">\r\n                     <Link className=\"navbar-brand \" to=\"/\">Text Utils</Link>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\" >\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0 \">\r\n                            <li className=\"nav-item \">\r\n                                 <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                 <Link className=\"nav-link \" aria-current=\"page\" to=\"/about\">About</Link>\r\n                            </li>\r\n\r\n                        </ul>\r\n                    <div className=\" form-check form-switch\">\r\n                        <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\"  checked= {props.check} onChange={enableDarkMode}/>\r\n                        <label className=\" form-check-label \" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React, { useState } from 'react'\r\n\r\nconst ReplaceText = (props) => {\r\n\r\n    const [word, setWord] = useState({\r\n        find: \"\",\r\n        replace: \"\"\r\n    })\r\n\r\n    let handleText = (event) => {\r\n        let { value, name } = event.target\r\n        setWord((prevVal) => {\r\n            return {\r\n                ...prevVal,\r\n                [name]: value\r\n            }\r\n        })\r\n    }\r\n\r\n    let handleReplaceText = () => {\r\n        console.log(props);\r\n        props.ReplaceTextFunc(word)\r\n        setWord({\r\n            find: \"\",\r\n            replace: \"\"\r\n        }\r\n        )\r\n    }\r\n\r\n    let closeModal = () => {\r\n        setWord({\r\n            find: \"\",\r\n            replace: \"\"\r\n        })\r\n    }\r\n    return (\r\n        <>\r\n            <button type=\"button\" className=\"btn btn-outline-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#staticBackdrop\">\r\n                Replace Text\r\n            </button>\r\n\r\n            <div className=\"modal fade\" id=\"staticBackdrop\" data-bs-backdrop=\"static\" data-bs-keyboard=\"false\" tabIndex=\"-1\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog\">\r\n                    <div className={\"modal-content p-3 \"+props.darkMode}>\r\n                        <label className=\"form-label\">Find Text</label>\r\n                        <input className={\"form-control form-control-lg \"+props.darkMode} name='find' value={word.find} type=\"text\" aria-label=\".form-control-lg example\" onChange={handleText} />\r\n                        <label className=\"form-label\">Replace</label>\r\n                        <input className={\"form-control form-control-lg \"+props.darkMode} name='replace' value={word.replace} onChange={handleText} type=\"text\" aria-label=\".form-control-lg example\" />\r\n\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\" onClick={closeModal}>Close</button>\r\n                            <button type=\"button\" className=\"btn btn-primary\" onClick={handleReplaceText}>Save changes</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default ReplaceText\r\n","import React, { useState } from 'react'\r\nimport ReplaceText from './ReplaceText';\r\n\r\nconst TextForm = (props) => {\r\n\r\n    const [text, setText] = useState(\"\");\r\n    let changeText = (event) => {\r\n        let { value } = event.target\r\n        setText(value)\r\n    }\r\n \r\n\r\n    let capitalizeText = () => {\r\n        let newText = text.toUpperCase()\r\n        setText(newText)\r\n    }\r\n\r\n    let lowercaseText = () => {\r\n        let newText = text.toLowerCase()\r\n        setText(newText)\r\n    }\r\n\r\n    let ReplaceTextFunc = (object)=>{\r\n        if (text.includes(object.find)){\r\n            let updatedText = text.replace(object.find, object.replace)\r\n            return setText(updatedText)\r\n        }\r\n        else\r\n            return null\r\n        }\r\n\r\n    let capitaliseFirst = ()=> {\r\n       let listOfWords = text.split(\" \");\r\n       let updatedList = []\r\n       console.log(listOfWords);\r\n       for (let i in listOfWords){\r\n            updatedList.push(listOfWords[i].charAt(0).toUpperCase() + listOfWords[i].slice(1));\r\n            console.log(updatedList);\r\n            let updatedText = updatedList.join(\" \")\r\n            setText(updatedText)\r\n            \r\n       }\r\n       \r\n    }\r\n\r\n    let clearText = ()=>{\r\n        setText(\"\")\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className={\"container \"+ props.darkMode}>\r\n\r\n            <div className=\"mt-3 \">\r\n                <h4>{props.Heading}</h4>\r\n                <textarea className={\"form-control text-form \"+props.darkMode} id=\"exampleFormControlTextarea1\" rows=\"8\" value={text} onChange={changeText}></textarea>\r\n            </div>\r\n            <div className={\"text-summary mb-3 \"+ props.darkMode}>\r\n                <h4>Total Characters: {text.length}</h4>\r\n                <h4>Total Words: {text.split(\" \").length - 1}</h4>\r\n            </div>\r\n            <button className=\"btn btn-outline-primary mx-1\" onClick={capitalizeText}>{props.Button1}</button>\r\n            <button className=\"btn btn-outline-primary mx-1\" onClick={lowercaseText}>{props.Button2}</button>\r\n            <button className=\"btn btn-outline-primary mx-1\" onClick={capitaliseFirst}>Capitalize First Letter</button>\r\n\r\n            <ReplaceText ReplaceTextFunc= {ReplaceTextFunc} darkMode= {props.darkMode}/>\r\n            <button className=\"btn btn-outline-danger mx-1\" onClick={clearText}>Clear Text</button>\r\n            <hr />\r\n            <div className=\"my-3 pb-4\">\r\n                <h2>Your Text Preview</h2>\r\n                <div className=\"my-2 text-break h-2\">\r\n                    <p>{text}</p>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TextForm\r\n","\r\nimport React, { useState } from 'react'\r\nimport About from './About'\r\nimport Alert from './Alert'\r\nimport Navbar from './Navbar'\r\nimport TextForm from './TextForm'\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\nconst App = () => {\r\n    const [darkMode, setDarkMode] = useState('')\r\n    const [navDark, setNavDark] = useState('light')\r\n    const [check, setCheck] = useState(false)\r\n    const [alert, setAlert] = useState(null);\r\n\r\n\r\n    let showAlert = (message, type) => {\r\n        setAlert({\r\n            msg: message,\r\n            type: type\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n    let DarkMode = (e) => {\r\n        if (check === false) {\r\n            setDarkMode('my-style-2')\r\n            setNavDark('dark')\r\n            document.body.classList.add('my-style')\r\n            setCheck(true)\r\n            showAlert(' Dark Mode Enabled', 'success')\r\n            setTimeout(() => {\r\n                showAlert(null)\r\n            }, 1500);\r\n        }\r\n        else {\r\n            setDarkMode('')\r\n            setNavDark('light')\r\n            setCheck(false)\r\n            document.body.classList.remove('my-style')\r\n            showAlert(' Dark Mode Disabled', 'success')\r\n            setTimeout(() => {\r\n                showAlert(null)\r\n            }, 1500);\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Router>\r\n                <Navbar\r\n                    DarkMode={DarkMode}\r\n                    darkMode={darkMode}\r\n                    navDark={navDark}\r\n                    check={check}\r\n                    showAlert={showAlert}\r\n                />\r\n\r\n\r\n                <Alert\r\n                    alert={alert}\r\n                />\r\n                <Switch>\r\n                    <Route exact path=\"/about\">\r\n                        <About />\r\n                    </Route>\r\n                    <Route exact path=\"/\">\r\n                        <TextForm\r\n                            Heading='Enter The Text To Analyse Below'\r\n                            Button1='Convert To Uppercase'\r\n                            Button2='Convert To Lowercase'\r\n                            DarkMode={DarkMode}\r\n                            darkMode={darkMode}\r\n                            check={check}\r\n                        />\r\n                    </Route>\r\n                </Switch>\r\n            </Router>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  \n  <>\n    <App/>\n  </>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}